/*
 * This file is generated by jOOQ.
 */
package com.elasticsearch.engine.demo.domain.mysql.jooq.generator.tables;


import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.Indexes;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.Keys;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.User;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.tables.records.PersonRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 人员表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Person extends TableImpl<PersonRecord> {

    private static final long serialVersionUID = -209901867;

    /**
     * The reference instance of <code>user.person</code>
     */
    public static final Person PERSON = new Person();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonRecord> getRecordType() {
        return PersonRecord.class;
    }

    /**
     * The column <code>user.person.id</code>. 自增id
     */
    public final TableField<PersonRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "自增id");

    /**
     * The column <code>user.person.person_no</code>. 用户编码
     */
    public final TableField<PersonRecord, String> PERSON_NO = createField(DSL.name("person_no"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户编码");

    /**
     * The column <code>user.person.person_name</code>. 用户名
     */
    public final TableField<PersonRecord, String> PERSON_NAME = createField(DSL.name("person_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>user.person.phone</code>. 用户手机
     */
    public final TableField<PersonRecord, Long> PHONE = createField(DSL.name("phone"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "用户手机");

    /**
     * The column <code>user.person.salary</code>. 工资
     */
    public final TableField<PersonRecord, BigDecimal> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.DECIMAL(10, 2), this, "工资");

    /**
     * The column <code>user.person.company</code>. 公司
     */
    public final TableField<PersonRecord, String> COMPANY = createField(DSL.name("company"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "公司");

    /**
     * The column <code>user.person.status</code>. 状态
     */
    public final TableField<PersonRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态");

    /**
     * The column <code>user.person.sex</code>. 状态
     */
    public final TableField<PersonRecord, Byte> SEX = createField(DSL.name("sex"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "状态");

    /**
     * The column <code>user.person.address</code>. 地址
     */
    public final TableField<PersonRecord, String> ADDRESS = createField(DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "地址");

    /**
     * The column <code>user.person.create_time</code>. 创建时间
     */
    public final TableField<PersonRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>user.person.create_user</code>. 创建人
     */
    public final TableField<PersonRecord, String> CREATE_USER = createField(DSL.name("create_user"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "创建人");

    /**
     * Create a <code>user.person</code> table reference
     */
    public Person() {
        this(DSL.name("person"), null);
    }

    /**
     * Create an aliased <code>user.person</code> table reference
     */
    public Person(String alias) {
        this(DSL.name(alias), PERSON);
    }

    /**
     * Create an aliased <code>user.person</code> table reference
     */
    public Person(Name alias) {
        this(alias, PERSON);
    }

    private Person(Name alias, Table<PersonRecord> aliased) {
        this(alias, aliased, null);
    }

    private Person(Name alias, Table<PersonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("人员表"));
    }

    public <O extends Record> Person(Table<O> child, ForeignKey<O, PersonRecord> key) {
        super(child, key, PERSON);
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_PRIMARY, Indexes.PERSON_UK_PERSON_NO);
    }

    @Override
    public Identity<PersonRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PERSON;
    }

    @Override
    public UniqueKey<PersonRecord> getPrimaryKey() {
        return Keys.KEY_PERSON_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonRecord>>asList(Keys.KEY_PERSON_PRIMARY, Keys.KEY_PERSON_UK_PERSON_NO);
    }

    @Override
    public Person as(String alias) {
        return new Person(DSL.name(alias), this);
    }

    @Override
    public Person as(Name alias) {
        return new Person(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(String name) {
        return new Person(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Person rename(Name name) {
        return new Person(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, String, String, Long, BigDecimal, String, Byte, Byte, String, LocalDateTime, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
