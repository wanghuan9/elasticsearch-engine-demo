/*
 * This file is generated by jOOQ.
 */
package com.elasticsearch.engine.demo.domain.mysql.jooq.generator.tables;


import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.Indexes;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.Keys;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.User;
import com.elasticsearch.engine.demo.domain.mysql.jooq.generator.tables.records.PersonExtendRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * 人员扩展表
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PersonExtend extends TableImpl<PersonExtendRecord> {

    private static final long serialVersionUID = -995106689;

    /**
     * The reference instance of <code>user.person_extend</code>
     */
    public static final PersonExtend PERSON_EXTEND = new PersonExtend();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonExtendRecord> getRecordType() {
        return PersonExtendRecord.class;
    }

    /**
     * The column <code>user.person_extend.id</code>. 自增id
     */
    public final TableField<PersonExtendRecord, ULong> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "自增id");

    /**
     * The column <code>user.person_extend.person_no</code>. 用户编码
     */
    public final TableField<PersonExtendRecord, String> PERSON_NO = createField(DSL.name("person_no"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "用户编码");

    /**
     * The column <code>user.person_extend.mail</code>. 邮箱
     */
    public final TableField<PersonExtendRecord, String> MAIL = createField(DSL.name("mail"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "邮箱");

    /**
     * The column <code>user.person_extend.hobby</code>. 爱好
     */
    public final TableField<PersonExtendRecord, String> HOBBY = createField(DSL.name("hobby"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.inline("", org.jooq.impl.SQLDataType.VARCHAR)), this, "爱好");

    /**
     * The column <code>user.person_extend.create_time</code>. 创建时间
     */
    public final TableField<PersonExtendRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * Create a <code>user.person_extend</code> table reference
     */
    public PersonExtend() {
        this(DSL.name("person_extend"), null);
    }

    /**
     * Create an aliased <code>user.person_extend</code> table reference
     */
    public PersonExtend(String alias) {
        this(DSL.name(alias), PERSON_EXTEND);
    }

    /**
     * Create an aliased <code>user.person_extend</code> table reference
     */
    public PersonExtend(Name alias) {
        this(alias, PERSON_EXTEND);
    }

    private PersonExtend(Name alias, Table<PersonExtendRecord> aliased) {
        this(alias, aliased, null);
    }

    private PersonExtend(Name alias, Table<PersonExtendRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("人员扩展表"));
    }

    public <O extends Record> PersonExtend(Table<O> child, ForeignKey<O, PersonExtendRecord> key) {
        super(child, key, PERSON_EXTEND);
    }

    @Override
    public Schema getSchema() {
        return User.USER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PERSON_EXTEND_PRIMARY, Indexes.PERSON_EXTEND_UK_PERSON_NO);
    }

    @Override
    public Identity<PersonExtendRecord, ULong> getIdentity() {
        return Keys.IDENTITY_PERSON_EXTEND;
    }

    @Override
    public UniqueKey<PersonExtendRecord> getPrimaryKey() {
        return Keys.KEY_PERSON_EXTEND_PRIMARY;
    }

    @Override
    public List<UniqueKey<PersonExtendRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonExtendRecord>>asList(Keys.KEY_PERSON_EXTEND_PRIMARY, Keys.KEY_PERSON_EXTEND_UK_PERSON_NO);
    }

    @Override
    public PersonExtend as(String alias) {
        return new PersonExtend(DSL.name(alias), this);
    }

    @Override
    public PersonExtend as(Name alias) {
        return new PersonExtend(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonExtend rename(String name) {
        return new PersonExtend(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PersonExtend rename(Name name) {
        return new PersonExtend(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, String, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
